git init -> inicia repositorio
git add biografía.txt  -> agregar un solo archivo
git add . -> agrega todos los archivos que hallan tenido cambios
git commit -m "versión 1" -> comentar hacer commit
git statut -> ver el estatus
git show -> muestra todos los cambios hechos
git log biografia.txt -> muestra todos los cambios hechos a este solo archivo 
git push -> subir a remoto

history -> en gitbash mira la historia de todos los comandos utilizados
!+numero del comando -> utilizo el comando 

git config -l -> muestra las configuraciones de config en lista
git config --global user.name "Jorge Ricardo" -> Colocamos el usuario de Git
git config --global user.email "Jandricardov@gmail.com" -> Colocamos el email de git
git config --list - Listado de configuración de git en el equipo
git log historia.txt -> Me muestra todos los cambios hechos en el archivo

git diff 95bc478bd743e5370ef0e09304ddc9116ae6c2af d67fc54ecd3052fe32ad5f7c2f37162e915a3e85 --> cambios entre versiones específicas 
git reset 95bc478bd743e5370ef0e09304ddc9116ae6c2af --hard -> reset duro, que todo vuelve a como estaba en la versión pasada en la linea de comando, borra todo lo que se hizo antes que no aparecen ni en los logs
git log --stat --> podremos ver los cambios específicos despues de cada commit
git checkout d67fc54ecd3052fe32ad5f7c2f37162e915a3e85 historia.txt --> devuelve el archivo en esta versión, lo deja en backstage hasta hacer el commit
git checkout master historia.txt --> me trae el archivo actual de la rama master
git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarl
git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.


*********GIT PARA REPOSITORIOS REMOTOS******
git clone url --> Para clonar un repositorio remoto en tu directorio de trabajo y crear un seguimiento de versiones en un repositorio local
git add -> igual que antes
git commit -> Igual que antes
git push -> Enviar los cambios realizados al repositorio remoto
git fetch -> trae la ultima actualización a tu repositorio local que luego deberás fusionar con tu parte del trabajo
git merge 
git pull -> Hace un fetch y merge al mismo tiempo


git branch cabecera -> creamos una rama llamada cabecera
git checkout cabecera -> nos movemos a la rama de cabecera
git commit -am "commit aca" -> agrega y hace commit de archivos existentes

git merge cabecera -> nos ubicamos en master y corremos este comando para fusionar los cambios de cabecera con master
git remote add origin https://github.com/MrRickFt/blogspot.git -> Conectarse al repositorio remoto de github
git remote -v -> muestra la conexión actual al repo
git pull origin main -> traer lo que tiene el repo
git pull origin main --allow-unrelated-histories -> acepta historias

/**** Llaves publicas y privadas ****/
Crear llave por ssh: ssh-keygen -t rsa -b 4096 -C "jandricardov@gmail.com"
revisamos que el servidor de ssh esté prendido: eval $(ssh-agent -s)
agregar la llave privada a nuestro sistema: ssh-add ~/.ssh/id_rsa
La agregamos a setting de github posteriormente
y luego en la carpeta del proyecto setteamos la conexión nueva ssh: git remote set-url origin git@github.com:MrRickFt/Git-Github.git
corroboramos la conexión: git remote -v
Hacemos pull y aceptamos:  git pull 
Luego fusionamos: git pull origin main

/********* Tags y versiones en git ****/
Para ver como se ha comportado el repo y cuales han sido sus ediciones: git log --all --graph --decorate --oneline
Podemos asignar este comando a una variable y llamar siempre la variable: alias arbolito="git log --all --graph --decorate --oneline"
Creando un tag:  git tag -a v0.1 -m "Tag de agregando notas al curso de git" 9f8f52b
consultamos los tags: git tag
consultamos a que hash está asignado el tag: git show-ref --tags
pusheamos los tags: git push origin --tags
para eliminar un tag: git tag -d dormido
para borrar el tag en el repo de github: git push origin :refs/tags/dormido

/** Manejo de ramas al servidor **/
git show-branch --all -- Muestra todas las ramas y detalles de sus usos
gitk -- ayuda visual de que ha pasado en las branchs

/** Clonar repo **/
git clone https://github.com/MrRickFt/Git-Github.git


/** Para cuando las embarras y quieres volver a donde todo estaba bien **/
git reflog -> nos muestra los cambios hechos aunque se halla borrado algo copiamos el log
git reset --HARD 390a"3 -> reemplazamos "390a"3" por el log al que queremos volver


/** cuando haces un commit pero se te olvidó modificar hacer una parte del código que iba junto con ese commit *//
git commit --amend -> hacemos el cambio que se nos había olvidado y luego ejecutamos el ammend para pegar los 2 cambios en un solo commit

/**** GREP **/
git grep color -->use la palabra color
git grep la --> donde use la palabra la
git grep -n color–> en que lineas use la palabra color
git grep -n platzi --> en que lineas use la palabra platzi
git grep -c la --> cuantas veces use la palabra la
git grep -c paltzi --> cuantas veces use la palabra platzi
git grep -c “<p>”–> cuantas veces use la etiqueta <p>

git log-S “cabecera” --> cuantas veces use la palabra cabecera en
todos los commits.

grep–> para los archivos
log --> para los commits.

/** Shorlogs e historiales **/
git shortlog -sn = muestra cuantos commit han hecho cada miembros del equipo.
git shortlog -sn --all = muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado
git shortlog -sn --all --no-merge = muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges
git blame ARCHIVO = muestra quien hizo cada cosa linea por linea
git COMANDO --help = muestra como funciona el comando.
git blame ARCHIVO -Llinea_inicial,linea_final= muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50
**git branch -r **= se muestran todas las ramas remotas
git branch -a = se muestran todas las ramas tanto locales como remotas